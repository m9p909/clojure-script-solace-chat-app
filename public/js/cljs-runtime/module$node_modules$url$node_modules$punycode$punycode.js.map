{
"version":3,
"file":"module$node_modules$url$node_modules$punycode$punycode.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/url/node_modules/punycode/punycode.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$url$node_modules$punycode$punycode\"] = function(global,require,module,exports) {\n/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","error","type","RangeError","errors","map","array","fn","length","result","mapDomain","string","parts","split","replace","regexSeparators","labels","encoded","join","ucs2decode","output","counter","value","extra","charCodeAt","push","ucs2encode","stringFromCharCode","adapt","delta","numPoints","firstTime","k","floor","damp","base","baseMinusTMin","skew","decode","input","inputLength","i","n","initialN","bias","initialBias","j","basic","lastIndexOf","delimiter","index","oldi","w","codePoint","digit","maxInt","t","tMin","tMax","baseMinusT","out","splice","encode","handledCPCount","basicLength","currentValue","m","handledCPCountPlusOne","q","qMinusT","freeExports","nodeType","freeModule","freeGlobal","window","self","regexPunycode","regexNonASCII","Math","String","fromCharCode","key","punycode","toASCII","test","toUnicode","slice","toLowerCase","define","amd","hasOwnProperty"]
}
