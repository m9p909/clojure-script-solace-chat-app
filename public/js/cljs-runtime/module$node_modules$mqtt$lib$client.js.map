{
"version":3,
"file":"module$node_modules$mqtt$lib$client.js",
"lineCount":53,
"mappings":"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",
"sources":["node_modules/mqtt/lib/client.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mqtt$lib$client\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict'\r\n\r\n/**\r\n * Module dependencies\r\n */\r\nvar EventEmitter = require('events').EventEmitter\r\nvar Store = require('./store')\r\nvar mqttPacket = require('mqtt-packet')\r\nvar Writable = require('readable-stream').Writable\r\nvar inherits = require('inherits')\r\nvar reInterval = require('reinterval')\r\nvar validations = require('./validations')\r\nvar xtend = require('xtend')\r\nvar debug = require('debug')('mqttjs:client')\r\nvar nextTick = process ? process.nextTick : function (callback) { setTimeout(callback, 0) }\r\nvar setImmediate = global.setImmediate || function (callback) {\r\n  // works in node v0.8\r\n  nextTick(callback)\r\n}\r\nvar defaultConnectOptions = {\r\n  keepalive: 60,\r\n  reschedulePings: true,\r\n  protocolId: 'MQTT',\r\n  protocolVersion: 4,\r\n  reconnectPeriod: 1000,\r\n  connectTimeout: 30 * 1000,\r\n  clean: true,\r\n  resubscribe: true\r\n}\r\n\r\nvar socketErrors = [\r\n  'ECONNREFUSED',\r\n  'EADDRINUSE',\r\n  'ECONNRESET',\r\n  'ENOTFOUND'\r\n]\r\n\r\n// Other Socket Errors: EADDRINUSE, ECONNRESET, ENOTFOUND.\r\n\r\nvar errors = {\r\n  0: '',\r\n  1: 'Unacceptable protocol version',\r\n  2: 'Identifier rejected',\r\n  3: 'Server unavailable',\r\n  4: 'Bad username or password',\r\n  5: 'Not authorized',\r\n  16: 'No matching subscribers',\r\n  17: 'No subscription existed',\r\n  128: 'Unspecified error',\r\n  129: 'Malformed Packet',\r\n  130: 'Protocol Error',\r\n  131: 'Implementation specific error',\r\n  132: 'Unsupported Protocol Version',\r\n  133: 'Client Identifier not valid',\r\n  134: 'Bad User Name or Password',\r\n  135: 'Not authorized',\r\n  136: 'Server unavailable',\r\n  137: 'Server busy',\r\n  138: 'Banned',\r\n  139: 'Server shutting down',\r\n  140: 'Bad authentication method',\r\n  141: 'Keep Alive timeout',\r\n  142: 'Session taken over',\r\n  143: 'Topic Filter invalid',\r\n  144: 'Topic Name invalid',\r\n  145: 'Packet identifier in use',\r\n  146: 'Packet Identifier not found',\r\n  147: 'Receive Maximum exceeded',\r\n  148: 'Topic Alias invalid',\r\n  149: 'Packet too large',\r\n  150: 'Message rate too high',\r\n  151: 'Quota exceeded',\r\n  152: 'Administrative action',\r\n  153: 'Payload format invalid',\r\n  154: 'Retain not supported',\r\n  155: 'QoS not supported',\r\n  156: 'Use another server',\r\n  157: 'Server moved',\r\n  158: 'Shared Subscriptions not supported',\r\n  159: 'Connection rate exceeded',\r\n  160: 'Maximum connect time',\r\n  161: 'Subscription Identifiers not supported',\r\n  162: 'Wildcard Subscriptions not supported'\r\n}\r\n\r\nfunction defaultId () {\r\n  return 'mqttjs_' + Math.random().toString(16).substr(2, 8)\r\n}\r\n\r\nfunction sendPacket (client, packet, cb) {\r\n  debug('sendPacket :: packet: %O', packet)\r\n  debug('sendPacket :: emitting `packetsend`')\r\n  client.emit('packetsend', packet)\r\n\r\n  debug('sendPacket :: writing to stream')\r\n  var result = mqttPacket.writeToStream(packet, client.stream, client.options)\r\n  debug('sendPacket :: writeToStream result %s', result)\r\n  if (!result && cb) {\r\n    debug('sendPacket :: handle events on `drain` once through callback.')\r\n    client.stream.once('drain', cb)\r\n  } else if (cb) {\r\n    debug('sendPacket :: invoking cb')\r\n    cb()\r\n  }\r\n}\r\n\r\nfunction flush (queue) {\r\n  if (queue) {\r\n    debug('flush: queue exists? %b', !!(queue))\r\n    Object.keys(queue).forEach(function (messageId) {\r\n      if (typeof queue[messageId].cb === 'function') {\r\n        queue[messageId].cb(new Error('Connection closed'))\r\n        delete queue[messageId]\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction flushVolatile (queue) {\r\n  if (queue) {\r\n    debug('flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function')\r\n    Object.keys(queue).forEach(function (messageId) {\r\n      if (queue[messageId].volatile && typeof queue[messageId].cb === 'function') {\r\n        queue[messageId].cb(new Error('Connection closed'))\r\n        delete queue[messageId]\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction storeAndSend (client, packet, cb, cbStorePut) {\r\n  debug('storeAndSend :: store packet with cmd %s to outgoingStore', packet.cmd)\r\n  client.outgoingStore.put(packet, function storedPacket (err) {\r\n    if (err) {\r\n      return cb && cb(err)\r\n    }\r\n    cbStorePut()\r\n    sendPacket(client, packet, cb)\r\n  })\r\n}\r\n\r\nfunction nop (error) {\r\n  debug('nop ::', error)\r\n}\r\n\r\n/**\r\n * MqttClient constructor\r\n *\r\n * @param {Stream} stream - stream\r\n * @param {Object} [options] - connection options\r\n * (see Connection#connect)\r\n */\r\nfunction MqttClient (streamBuilder, options) {\r\n  var k\r\n  var that = this\r\n\r\n  if (!(this instanceof MqttClient)) {\r\n    return new MqttClient(streamBuilder, options)\r\n  }\r\n\r\n  this.options = options || {}\r\n\r\n  // Defaults\r\n  for (k in defaultConnectOptions) {\r\n    if (typeof this.options[k] === 'undefined') {\r\n      this.options[k] = defaultConnectOptions[k]\r\n    } else {\r\n      this.options[k] = options[k]\r\n    }\r\n  }\r\n\r\n  debug('MqttClient :: options.protocol', options.protocol)\r\n  debug('MqttClient :: options.protocolVersion', options.protocolVersion)\r\n  debug('MqttClient :: options.username', options.username)\r\n  debug('MqttClient :: options.keepalive', options.keepalive)\r\n  debug('MqttClient :: options.reconnectPeriod', options.reconnectPeriod)\r\n  debug('MqttClient :: options.rejectUnauthorized', options.rejectUnauthorized)\r\n\r\n  this.options.clientId = (typeof options.clientId === 'string') ? options.clientId : defaultId()\r\n\r\n  debug('MqttClient :: clientId', this.options.clientId)\r\n\r\n  this.options.customHandleAcks = (options.protocolVersion === 5 && options.customHandleAcks) ? options.customHandleAcks : function () { arguments[3](0) }\r\n\r\n  this.streamBuilder = streamBuilder\r\n\r\n  // Inflight message storages\r\n  this.outgoingStore = options.outgoingStore || new Store()\r\n  this.incomingStore = options.incomingStore || new Store()\r\n\r\n  // Should QoS zero messages be queued when the connection is broken?\r\n  this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero\r\n\r\n  // map of subscribed topics to support reconnection\r\n  this._resubscribeTopics = {}\r\n\r\n  // map of a subscribe messageId and a topic\r\n  this.messageIdToTopic = {}\r\n\r\n  // Ping timer, setup in _setupPingTimer\r\n  this.pingTimer = null\r\n  // Is the client connected?\r\n  this.connected = false\r\n  // Are we disconnecting?\r\n  this.disconnecting = false\r\n  // Packet queue\r\n  this.queue = []\r\n  // connack timer\r\n  this.connackTimer = null\r\n  // Reconnect timer\r\n  this.reconnectTimer = null\r\n  // Is processing store?\r\n  this._storeProcessing = false\r\n  // Packet Ids are put into the store during store processing\r\n  this._packetIdsDuringStoreProcessing = {}\r\n  /**\r\n   * MessageIDs starting with 1\r\n   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\r\n   */\r\n  this.nextId = Math.max(1, Math.floor(Math.random() * 65535))\r\n\r\n  // Inflight callbacks\r\n  this.outgoing = {}\r\n\r\n  // True if connection is first time.\r\n  this._firstConnection = true\r\n\r\n  // Send queued packets\r\n  this.on('connect', function () {\r\n    var queue = this.queue\r\n\r\n    function deliver () {\r\n      var entry = queue.shift()\r\n      debug('deliver :: entry %o', entry)\r\n      var packet = null\r\n\r\n      if (!entry) {\r\n        return\r\n      }\r\n\r\n      packet = entry.packet\r\n      debug('deliver :: call _sendPacket for %o', packet)\r\n      that._sendPacket(\r\n        packet,\r\n        function (err) {\r\n          if (entry.cb) {\r\n            entry.cb(err)\r\n          }\r\n          deliver()\r\n        }\r\n      )\r\n    }\r\n\r\n    debug('connect :: sending queued packets')\r\n    deliver()\r\n  })\r\n\r\n  this.on('close', function () {\r\n    debug('close :: connected set to `false`')\r\n    this.connected = false\r\n\r\n    debug('close :: clearing connackTimer')\r\n    clearTimeout(this.connackTimer)\r\n\r\n    debug('close :: clearing ping timer')\r\n    if (that.pingTimer !== null) {\r\n      that.pingTimer.clear()\r\n      that.pingTimer = null\r\n    }\r\n\r\n    debug('close :: calling _setupReconnect')\r\n    this._setupReconnect()\r\n  })\r\n  EventEmitter.call(this)\r\n\r\n  debug('MqttClient :: setting up stream')\r\n  this._setupStream()\r\n}\r\ninherits(MqttClient, EventEmitter)\r\n\r\n/**\r\n * setup the event handlers in the inner stream.\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._setupStream = function () {\r\n  var connectPacket\r\n  var that = this\r\n  var writable = new Writable()\r\n  var parser = mqttPacket.parser(this.options)\r\n  var completeParse = null\r\n  var packets = []\r\n\r\n  debug('_setupStream :: calling method to clear reconnect')\r\n  this._clearReconnect()\r\n\r\n  debug('_setupStream :: using streamBuilder provided to client to create stream')\r\n  this.stream = this.streamBuilder(this)\r\n\r\n  parser.on('packet', function (packet) {\r\n    debug('parser :: on packet push to packets array.')\r\n    packets.push(packet)\r\n  })\r\n\r\n  function nextTickWork () {\r\n    if (packets.length) {\r\n      nextTick(work)\r\n    } else {\r\n      var done = completeParse\r\n      completeParse = null\r\n      done()\r\n    }\r\n  }\r\n\r\n  function work () {\r\n    debug('work :: getting next packet in queue')\r\n    var packet = packets.shift()\r\n\r\n    if (packet) {\r\n      debug('work :: packet pulled from queue')\r\n      that._handlePacket(packet, nextTickWork)\r\n    } else {\r\n      debug('work :: no packets in queue')\r\n      var done = completeParse\r\n      completeParse = null\r\n      debug('work :: done flag is %s', !!(done))\r\n      if (done) done()\r\n    }\r\n  }\r\n\r\n  writable._write = function (buf, enc, done) {\r\n    completeParse = done\r\n    debug('writable stream :: parsing buffer')\r\n    parser.parse(buf)\r\n    work()\r\n  }\r\n\r\n  function streamErrorHandler (error) {\r\n    debug('streamErrorHandler :: error', error.message)\r\n    if (socketErrors.includes(error.code)) {\r\n      // handle error\r\n      debug('streamErrorHandler :: emitting error')\r\n      that.emit('error', error)\r\n    } else {\r\n      nop(error)\r\n    }\r\n  }\r\n\r\n  debug('_setupStream :: pipe stream to writable stream')\r\n  this.stream.pipe(writable)\r\n\r\n  // Suppress connection errors\r\n  this.stream.on('error', streamErrorHandler)\r\n\r\n  // Echo stream close\r\n  this.stream.on('close', function () {\r\n    debug('(%s)stream :: on close', that.options.clientId)\r\n    flushVolatile(that.outgoing)\r\n    debug('stream: emit close to MqttClient')\r\n    that.emit('close')\r\n  })\r\n\r\n  // Send a connect packet\r\n  debug('_setupStream: sending packet `connect`')\r\n  connectPacket = Object.create(this.options)\r\n  connectPacket.cmd = 'connect'\r\n  // avoid message queue\r\n  sendPacket(this, connectPacket)\r\n\r\n  // Echo connection errors\r\n  parser.on('error', this.emit.bind(this, 'error'))\r\n\r\n  // auth\r\n  if (this.options.properties) {\r\n    if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {\r\n      that.end(() =>\r\n        this.emit('error', new Error('Packet has no Authentication Method')\r\n        ))\r\n      return this\r\n    }\r\n    if (this.options.properties.authenticationMethod && this.options.authPacket && typeof this.options.authPacket === 'object') {\r\n      var authPacket = xtend({cmd: 'auth', reasonCode: 0}, this.options.authPacket)\r\n      sendPacket(this, authPacket)\r\n    }\r\n  }\r\n\r\n  // many drain listeners are needed for qos 1 callbacks if the connection is intermittent\r\n  this.stream.setMaxListeners(1000)\r\n\r\n  clearTimeout(this.connackTimer)\r\n  this.connackTimer = setTimeout(function () {\r\n    debug('!!connectTimeout hit!! Calling _cleanUp with force `true`')\r\n    that._cleanUp(true)\r\n  }, this.options.connectTimeout)\r\n}\r\n\r\nMqttClient.prototype._handlePacket = function (packet, done) {\r\n  var options = this.options\r\n\r\n  if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {\r\n    this.emit('error', new Error('exceeding packets size ' + packet.cmd))\r\n    this.end({reasonCode: 149, properties: { reasonString: 'Maximum packet size was exceeded' }})\r\n    return this\r\n  }\r\n  debug('_handlePacket :: emitting packetreceive')\r\n  this.emit('packetreceive', packet)\r\n\r\n  switch (packet.cmd) {\r\n    case 'publish':\r\n      this._handlePublish(packet, done)\r\n      break\r\n    case 'puback':\r\n    case 'pubrec':\r\n    case 'pubcomp':\r\n    case 'suback':\r\n    case 'unsuback':\r\n      this._handleAck(packet)\r\n      done()\r\n      break\r\n    case 'pubrel':\r\n      this._handlePubrel(packet, done)\r\n      break\r\n    case 'connack':\r\n      this._handleConnack(packet)\r\n      done()\r\n      break\r\n    case 'pingresp':\r\n      this._handlePingresp(packet)\r\n      done()\r\n      break\r\n    case 'disconnect':\r\n      this._handleDisconnect(packet)\r\n      done()\r\n      break\r\n    default:\r\n      // do nothing\r\n      // maybe we should do an error handling\r\n      // or just log it\r\n      break\r\n  }\r\n}\r\n\r\nMqttClient.prototype._checkDisconnecting = function (callback) {\r\n  if (this.disconnecting) {\r\n    if (callback) {\r\n      callback(new Error('client disconnecting'))\r\n    } else {\r\n      this.emit('error', new Error('client disconnecting'))\r\n    }\r\n  }\r\n  return this.disconnecting\r\n}\r\n\r\n/**\r\n * publish - publish <message> to <topic>\r\n *\r\n * @param {String} topic - topic to publish to\r\n * @param {String, Buffer} message - message to publish\r\n * @param {Object} [opts] - publish options, includes:\r\n *    {Number} qos - qos level to publish on\r\n *    {Boolean} retain - whether or not to retain the message\r\n *    {Boolean} dup - whether or not mark a message as duplicate\r\n *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`\r\n * @param {Function} [callback] - function(err){}\r\n *    called when publish succeeds or fails\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n *\r\n * @example client.publish('topic', 'message');\r\n * @example\r\n *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});\r\n * @example client.publish('topic', 'message', console.log);\r\n */\r\nMqttClient.prototype.publish = function (topic, message, opts, callback) {\r\n  debug('publish :: message `%s` to topic `%s`', message, topic)\r\n  var packet\r\n  var options = this.options\r\n\r\n  // .publish(topic, payload, cb);\r\n  if (typeof opts === 'function') {\r\n    callback = opts\r\n    opts = null\r\n  }\r\n\r\n  // default opts\r\n  var defaultOpts = {qos: 0, retain: false, dup: false}\r\n  opts = xtend(defaultOpts, opts)\r\n\r\n  if (this._checkDisconnecting(callback)) {\r\n    return this\r\n  }\r\n\r\n  packet = {\r\n    cmd: 'publish',\r\n    topic: topic,\r\n    payload: message,\r\n    qos: opts.qos,\r\n    retain: opts.retain,\r\n    messageId: this._nextId(),\r\n    dup: opts.dup\r\n  }\r\n\r\n  if (options.protocolVersion === 5) {\r\n    packet.properties = opts.properties\r\n    if ((!options.properties && packet.properties && packet.properties.topicAlias) || ((opts.properties && options.properties) &&\r\n      ((opts.properties.topicAlias && options.properties.topicAliasMaximum && opts.properties.topicAlias > options.properties.topicAliasMaximum) ||\r\n        (!options.properties.topicAliasMaximum && opts.properties.topicAlias)))) {\r\n      /*\r\n      if we are don`t setup topic alias or\r\n      topic alias maximum less than topic alias or\r\n      server don`t give topic alias maximum,\r\n      we are removing topic alias from packet\r\n      */\r\n      delete packet.properties.topicAlias\r\n    }\r\n  }\r\n\r\n  debug('publish :: qos', opts.qos)\r\n  switch (opts.qos) {\r\n    case 1:\r\n    case 2:\r\n      // Add to callbacks\r\n      this.outgoing[packet.messageId] = {\r\n        volatile: false,\r\n        cb: callback || nop\r\n      }\r\n      if (this._storeProcessing) {\r\n        debug('_storeProcessing enabled')\r\n        this._packetIdsDuringStoreProcessing[packet.messageId] = false\r\n        this._storePacket(packet, undefined, opts.cbStorePut)\r\n      } else {\r\n        debug('MqttClient:publish: packet cmd: %s', packet.cmd)\r\n        this._sendPacket(packet, undefined, opts.cbStorePut)\r\n      }\r\n      break\r\n    default:\r\n      if (this._storeProcessing) {\r\n        debug('_storeProcessing enabled')\r\n        this._storePacket(packet, callback, opts.cbStorePut)\r\n      } else {\r\n        debug('MqttClient:publish: packet cmd: %s', packet.cmd)\r\n        this._sendPacket(packet, callback, opts.cbStorePut)\r\n      }\r\n      break\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * subscribe - subscribe to <topic>\r\n *\r\n * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}\r\n * @param {Object} [opts] - optional subscription options, includes:\r\n *    {Number} qos - subscribe qos level\r\n * @param {Function} [callback] - function(err, granted){} where:\r\n *    {Error} err - subscription error (none at the moment!)\r\n *    {Array} granted - array of {topic: 't', qos: 0}\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n * @example client.subscribe('topic');\r\n * @example client.subscribe('topic', {qos: 1});\r\n * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);\r\n * @example client.subscribe('topic', console.log);\r\n */\r\nMqttClient.prototype.subscribe = function () {\r\n  var packet\r\n  var args = new Array(arguments.length)\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    args[i] = arguments[i]\r\n  }\r\n  var subs = []\r\n  var obj = args.shift()\r\n  var resubscribe = obj.resubscribe\r\n  var callback = args.pop() || nop\r\n  var opts = args.pop()\r\n  var invalidTopic\r\n  var that = this\r\n  var version = this.options.protocolVersion\r\n\r\n  delete obj.resubscribe\r\n\r\n  if (typeof obj === 'string') {\r\n    obj = [obj]\r\n  }\r\n\r\n  if (typeof callback !== 'function') {\r\n    opts = callback\r\n    callback = nop\r\n  }\r\n\r\n  invalidTopic = validations.validateTopics(obj)\r\n  if (invalidTopic !== null) {\r\n    setImmediate(callback, new Error('Invalid topic ' + invalidTopic))\r\n    return this\r\n  }\r\n\r\n  if (this._checkDisconnecting(callback)) {\r\n    debug('subscribe: discconecting true')\r\n    return this\r\n  }\r\n\r\n  var defaultOpts = {\r\n    qos: 0\r\n  }\r\n  if (version === 5) {\r\n    defaultOpts.nl = false\r\n    defaultOpts.rap = false\r\n    defaultOpts.rh = 0\r\n  }\r\n  opts = xtend(defaultOpts, opts)\r\n\r\n  if (Array.isArray(obj)) {\r\n    obj.forEach(function (topic) {\r\n      debug('subscribe: array topic %s', topic)\r\n      if (!that._resubscribeTopics.hasOwnProperty(topic) ||\r\n        that._resubscribeTopics[topic].qos < opts.qos ||\r\n          resubscribe) {\r\n        var currentOpts = {\r\n          topic: topic,\r\n          qos: opts.qos\r\n        }\r\n        if (version === 5) {\r\n          currentOpts.nl = opts.nl\r\n          currentOpts.rap = opts.rap\r\n          currentOpts.rh = opts.rh\r\n          currentOpts.properties = opts.properties\r\n        }\r\n        debug('subscribe: pushing topic `%s` and qos `%s` to subs list', currentOpts.topic, currentOpts.qos)\r\n        subs.push(currentOpts)\r\n      }\r\n    })\r\n  } else {\r\n    Object\r\n      .keys(obj)\r\n      .forEach(function (k) {\r\n        debug('subscribe: object topic %s', k)\r\n        if (!that._resubscribeTopics.hasOwnProperty(k) ||\r\n          that._resubscribeTopics[k].qos < obj[k].qos ||\r\n            resubscribe) {\r\n          var currentOpts = {\r\n            topic: k,\r\n            qos: obj[k].qos\r\n          }\r\n          if (version === 5) {\r\n            currentOpts.nl = obj[k].nl\r\n            currentOpts.rap = obj[k].rap\r\n            currentOpts.rh = obj[k].rh\r\n            currentOpts.properties = opts.properties\r\n          }\r\n          debug('subscribe: pushing `%s` to subs list', currentOpts)\r\n          subs.push(currentOpts)\r\n        }\r\n      })\r\n  }\r\n\r\n  packet = {\r\n    cmd: 'subscribe',\r\n    subscriptions: subs,\r\n    qos: 1,\r\n    retain: false,\r\n    dup: false,\r\n    messageId: this._nextId()\r\n  }\r\n\r\n  if (opts.properties) {\r\n    packet.properties = opts.properties\r\n  }\r\n\r\n  if (!subs.length) {\r\n    callback(null, [])\r\n    return\r\n  }\r\n\r\n  // subscriptions to resubscribe to in case of disconnect\r\n  if (this.options.resubscribe) {\r\n    debug('subscribe :: resubscribe true')\r\n    var topics = []\r\n    subs.forEach(function (sub) {\r\n      if (that.options.reconnectPeriod > 0) {\r\n        var topic = { qos: sub.qos }\r\n        if (version === 5) {\r\n          topic.nl = sub.nl || false\r\n          topic.rap = sub.rap || false\r\n          topic.rh = sub.rh || 0\r\n          topic.properties = sub.properties\r\n        }\r\n        that._resubscribeTopics[sub.topic] = topic\r\n        topics.push(sub.topic)\r\n      }\r\n    })\r\n    that.messageIdToTopic[packet.messageId] = topics\r\n  }\r\n\r\n  this.outgoing[packet.messageId] = {\r\n    volatile: true,\r\n    cb: function (err, packet) {\r\n      if (!err) {\r\n        var granted = packet.granted\r\n        for (var i = 0; i < granted.length; i += 1) {\r\n          subs[i].qos = granted[i]\r\n        }\r\n      }\r\n\r\n      callback(err, subs)\r\n    }\r\n  }\r\n  debug('subscribe :: call _sendPacket')\r\n  this._sendPacket(packet)\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * unsubscribe - unsubscribe from topic(s)\r\n *\r\n * @param {String, Array} topic - topics to unsubscribe from\r\n * @param {Object} [opts] - optional subscription options, includes:\r\n *    {Object} properties - properties of unsubscribe packet\r\n * @param {Function} [callback] - callback fired on unsuback\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n * @example client.unsubscribe('topic');\r\n * @example client.unsubscribe('topic', console.log);\r\n */\r\nMqttClient.prototype.unsubscribe = function () {\r\n  var packet = {\r\n    cmd: 'unsubscribe',\r\n    qos: 1,\r\n    messageId: this._nextId()\r\n  }\r\n  var that = this\r\n  var args = new Array(arguments.length)\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    args[i] = arguments[i]\r\n  }\r\n  var topic = args.shift()\r\n  var callback = args.pop() || nop\r\n  var opts = args.pop()\r\n\r\n  if (typeof topic === 'string') {\r\n    topic = [topic]\r\n  }\r\n\r\n  if (typeof callback !== 'function') {\r\n    opts = callback\r\n    callback = nop\r\n  }\r\n\r\n  if (this._checkDisconnecting(callback)) {\r\n    return this\r\n  }\r\n\r\n  if (typeof topic === 'string') {\r\n    packet.unsubscriptions = [topic]\r\n  } else if (Array.isArray(topic)) {\r\n    packet.unsubscriptions = topic\r\n  }\r\n\r\n  if (this.options.resubscribe) {\r\n    packet.unsubscriptions.forEach(function (topic) {\r\n      delete that._resubscribeTopics[topic]\r\n    })\r\n  }\r\n\r\n  if (typeof opts === 'object' && opts.properties) {\r\n    packet.properties = opts.properties\r\n  }\r\n\r\n  this.outgoing[packet.messageId] = {\r\n    volatile: true,\r\n    cb: callback\r\n  }\r\n\r\n  debug('unsubscribe: call _sendPacket')\r\n  this._sendPacket(packet)\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * end - close connection\r\n *\r\n * @returns {MqttClient} this - for chaining\r\n * @param {Boolean} force - do not wait for all in-flight messages to be acked\r\n * @param {Object} opts - added to the disconnect packet\r\n * @param {Function} cb - called when the client has been closed\r\n *\r\n * @api public\r\n */\r\nMqttClient.prototype.end = function (force, opts, cb) {\r\n  var that = this\r\n\r\n  debug('end :: (%s)', this.options.clientId)\r\n\r\n  if (force == null || typeof force !== 'boolean') {\r\n    cb = opts || nop\r\n    opts = force\r\n    force = false\r\n    if (typeof opts !== 'object') {\r\n      cb = opts\r\n      opts = null\r\n      if (typeof cb !== 'function') {\r\n        cb = nop\r\n      }\r\n    }\r\n  }\r\n\r\n  if (typeof opts !== 'object') {\r\n    cb = opts\r\n    opts = null\r\n  }\r\n\r\n  debug('end :: cb? %s', !!cb)\r\n  cb = cb || nop\r\n\r\n  function closeStores () {\r\n    debug('end :: closeStores: closing incoming and outgoing stores')\r\n    that.disconnected = true\r\n    that.incomingStore.close(function (e1) {\r\n      that.outgoingStore.close(function (e2) {\r\n        debug('end :: closeStores: emitting end')\r\n        that.emit('end')\r\n        if (cb) {\r\n          let err = e1 || e2\r\n          debug('end :: closeStores: invoking callback with args')\r\n          cb(err)\r\n        }\r\n      })\r\n    })\r\n    if (that._deferredReconnect) {\r\n      that._deferredReconnect()\r\n    }\r\n  }\r\n\r\n  function finish () {\r\n    // defer closesStores of an I/O cycle,\r\n    // just to make sure things are\r\n    // ok for websockets\r\n    debug('end :: (%s) :: finish :: calling _cleanUp with force %s', that.options.clientId, force)\r\n    that._cleanUp(force, () => {\r\n      debug('end :: finish :: calling process.nextTick on closeStores')\r\n      // var boundProcess = nextTick.bind(null, closeStores)\r\n      nextTick(closeStores.bind(that))\r\n    }, opts)\r\n  }\r\n\r\n  if (this.disconnecting) {\r\n    cb()\r\n    return this\r\n  }\r\n\r\n  this._clearReconnect()\r\n\r\n  this.disconnecting = true\r\n\r\n  if (!force && Object.keys(this.outgoing).length > 0) {\r\n    // wait 10ms, just to be sure we received all of it\r\n    debug('end :: (%s) :: calling finish in 10ms once outgoing is empty', that.options.clientId)\r\n    this.once('outgoingEmpty', setTimeout.bind(null, finish, 10))\r\n  } else {\r\n    debug('end :: (%s) :: immediately calling finish', that.options.clientId)\r\n    finish()\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n/**\r\n * removeOutgoingMessage - remove a message in outgoing store\r\n * the outgoing callback will be called withe Error('Message removed') if the message is removed\r\n *\r\n * @param {Number} messageId - messageId to remove message\r\n * @returns {MqttClient} this - for chaining\r\n * @api public\r\n *\r\n * @example client.removeOutgoingMessage(client.getLastMessageId());\r\n */\r\nMqttClient.prototype.removeOutgoingMessage = function (messageId) {\r\n  var cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null\r\n  delete this.outgoing[messageId]\r\n  this.outgoingStore.del({messageId: messageId}, function () {\r\n    cb(new Error('Message removed'))\r\n  })\r\n  return this\r\n}\r\n\r\n/**\r\n * reconnect - connect again using the same options as connect()\r\n *\r\n * @param {Object} [opts] - optional reconnect options, includes:\r\n *    {Store} incomingStore - a store for the incoming packets\r\n *    {Store} outgoingStore - a store for the outgoing packets\r\n *    if opts is not given, current stores are used\r\n * @returns {MqttClient} this - for chaining\r\n *\r\n * @api public\r\n */\r\nMqttClient.prototype.reconnect = function (opts) {\r\n  debug('client reconnect')\r\n  var that = this\r\n  var f = function () {\r\n    if (opts) {\r\n      that.options.incomingStore = opts.incomingStore\r\n      that.options.outgoingStore = opts.outgoingStore\r\n    } else {\r\n      that.options.incomingStore = null\r\n      that.options.outgoingStore = null\r\n    }\r\n    that.incomingStore = that.options.incomingStore || new Store()\r\n    that.outgoingStore = that.options.outgoingStore || new Store()\r\n    that.disconnecting = false\r\n    that.disconnected = false\r\n    that._deferredReconnect = null\r\n    that._reconnect()\r\n  }\r\n\r\n  if (this.disconnecting && !this.disconnected) {\r\n    this._deferredReconnect = f\r\n  } else {\r\n    f()\r\n  }\r\n  return this\r\n}\r\n\r\n/**\r\n * _reconnect - implement reconnection\r\n * @api privateish\r\n */\r\nMqttClient.prototype._reconnect = function () {\r\n  debug('_reconnect: emitting reconnect to client')\r\n  this.emit('reconnect')\r\n  if (this.connected) {\r\n    this.end(() => { this._setupStream() })\r\n    debug('client already connected. disconnecting first.')\r\n  } else {\r\n    debug('_reconnect: calling _setupStream')\r\n    this._setupStream()\r\n  }\r\n}\r\n\r\n/**\r\n * _setupReconnect - setup reconnect timer\r\n */\r\nMqttClient.prototype._setupReconnect = function () {\r\n  var that = this\r\n\r\n  if (!that.disconnecting && !that.reconnectTimer && (that.options.reconnectPeriod > 0)) {\r\n    if (!this.reconnecting) {\r\n      debug('_setupReconnect :: emit `offline` state')\r\n      this.emit('offline')\r\n      debug('_setupReconnect :: set `reconnecting` to `true`')\r\n      this.reconnecting = true\r\n    }\r\n    debug('_setupReconnect :: setting reconnectTimer for %d ms', that.options.reconnectPeriod)\r\n    that.reconnectTimer = setInterval(function () {\r\n      debug('reconnectTimer :: reconnect triggered!')\r\n      that._reconnect()\r\n    }, that.options.reconnectPeriod)\r\n  } else {\r\n    debug('_setupReconnect :: doing nothing...')\r\n  }\r\n}\r\n\r\n/**\r\n * _clearReconnect - clear the reconnect timer\r\n */\r\nMqttClient.prototype._clearReconnect = function () {\r\n  debug('_clearReconnect : clearing reconnect timer')\r\n  if (this.reconnectTimer) {\r\n    clearInterval(this.reconnectTimer)\r\n    this.reconnectTimer = null\r\n  }\r\n}\r\n\r\n/**\r\n * _cleanUp - clean up on connection end\r\n * @api private\r\n */\r\nMqttClient.prototype._cleanUp = function (forced, done) {\r\n  var opts = arguments[2]\r\n  if (done) {\r\n    debug('_cleanUp :: done callback provided for on stream close')\r\n    this.stream.on('close', done)\r\n  }\r\n\r\n  debug('_cleanUp :: forced? %s', forced)\r\n  if (forced) {\r\n    if ((this.options.reconnectPeriod === 0) && this.options.clean) {\r\n      flush(this.outgoing)\r\n    }\r\n    debug('_cleanUp :: (%s) :: destroying stream', this.options.clientId)\r\n    this.stream.destroy()\r\n  } else {\r\n    var packet = xtend({ cmd: 'disconnect' }, opts)\r\n    debug('_cleanUp :: (%s) :: call _sendPacket with disconnect packet', this.options.clientId)\r\n    this._sendPacket(\r\n      packet,\r\n      setImmediate.bind(\r\n        null,\r\n        this.stream.end.bind(this.stream)\r\n      )\r\n    )\r\n  }\r\n\r\n  if (!this.disconnecting) {\r\n    debug('_cleanUp :: client not disconnecting. Clearing and resetting reconnect.')\r\n    this._clearReconnect()\r\n    this._setupReconnect()\r\n  }\r\n\r\n  if (this.pingTimer !== null) {\r\n    debug('_cleanUp :: clearing pingTimer')\r\n    this.pingTimer.clear()\r\n    this.pingTimer = null\r\n  }\r\n\r\n  if (done && !this.connected) {\r\n    debug('_cleanUp :: (%s) :: removing stream `done` callback `close` listener', this.options.clientId)\r\n    this.stream.removeListener('close', done)\r\n    done()\r\n  }\r\n}\r\n\r\n/**\r\n * _sendPacket - send or queue a packet\r\n * @param {Object} packet - packet options\r\n * @param {Function} cb - callback when the packet is sent\r\n * @param {Function} cbStorePut - called when message is put into outgoingStore\r\n * @api private\r\n */\r\nMqttClient.prototype._sendPacket = function (packet, cb, cbStorePut) {\r\n  debug('_sendPacket :: (%s) ::  start', this.options.clientId)\r\n  cbStorePut = cbStorePut || nop\r\n\r\n  if (!this.connected) {\r\n    debug('_sendPacket :: client not connected. Storing packet offline.')\r\n    this._storePacket(packet, cb, cbStorePut)\r\n    return\r\n  }\r\n\r\n  // When sending a packet, reschedule the ping timer\r\n  this._shiftPingInterval()\r\n\r\n  switch (packet.cmd) {\r\n    case 'publish':\r\n      break\r\n    case 'pubrel':\r\n      storeAndSend(this, packet, cb, cbStorePut)\r\n      return\r\n    default:\r\n      sendPacket(this, packet, cb)\r\n      return\r\n  }\r\n\r\n  switch (packet.qos) {\r\n    case 2:\r\n    case 1:\r\n      storeAndSend(this, packet, cb, cbStorePut)\r\n      break\r\n    /**\r\n     * no need of case here since it will be caught by default\r\n     * and jshint comply that before default it must be a break\r\n     * anyway it will result in -1 evaluation\r\n     */\r\n    case 0:\r\n      /* falls through */\r\n    default:\r\n      sendPacket(this, packet, cb)\r\n      break\r\n  }\r\n  debug('_sendPacket :: (%s) ::  end', this.options.clientId)\r\n}\r\n\r\n/**\r\n * _storePacket - queue a packet\r\n * @param {Object} packet - packet options\r\n * @param {Function} cb - callback when the packet is sent\r\n * @param {Function} cbStorePut - called when message is put into outgoingStore\r\n * @api private\r\n */\r\nMqttClient.prototype._storePacket = function (packet, cb, cbStorePut) {\r\n  debug('_storePacket :: packet: %o', packet)\r\n  debug('_storePacket :: cb? %s', !!cb)\r\n  cbStorePut = cbStorePut || nop\r\n\r\n  // check that the packet is not a qos of 0, or that the command is not a publish\r\n  if (((packet.qos || 0) === 0 && this.queueQoSZero) || packet.cmd !== 'publish') {\r\n    this.queue.push({ packet: packet, cb: cb })\r\n  } else if (packet.qos > 0) {\r\n    cb = this.outgoing[packet.messageId] ? this.outgoing[packet.messageId].cb : null\r\n    this.outgoingStore.put(packet, function (err) {\r\n      if (err) {\r\n        return cb && cb(err)\r\n      }\r\n      cbStorePut()\r\n    })\r\n  } else if (cb) {\r\n    cb(new Error('No connection to broker'))\r\n  }\r\n}\r\n\r\n/**\r\n * _setupPingTimer - setup the ping timer\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._setupPingTimer = function () {\r\n  debug('_setupPingTimer :: keepalive %d (seconds)', this.options.keepalive)\r\n  var that = this\r\n\r\n  if (!this.pingTimer && this.options.keepalive) {\r\n    this.pingResp = true\r\n    this.pingTimer = reInterval(function () {\r\n      that._checkPing()\r\n    }, this.options.keepalive * 1000)\r\n  }\r\n}\r\n\r\n/**\r\n * _shiftPingInterval - reschedule the ping interval\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._shiftPingInterval = function () {\r\n  if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {\r\n    this.pingTimer.reschedule(this.options.keepalive * 1000)\r\n  }\r\n}\r\n/**\r\n * _checkPing - check if a pingresp has come back, and ping the server again\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._checkPing = function () {\r\n  debug('_checkPing :: checking ping...')\r\n  if (this.pingResp) {\r\n    debug('_checkPing :: ping response received. Clearing flag and sending `pingreq`')\r\n    this.pingResp = false\r\n    this._sendPacket({ cmd: 'pingreq' })\r\n  } else {\r\n    // do a forced cleanup since socket will be in bad shape\r\n    debug('_checkPing :: calling _cleanUp with force true')\r\n    this._cleanUp(true)\r\n  }\r\n}\r\n\r\n/**\r\n * _handlePingresp - handle a pingresp\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._handlePingresp = function () {\r\n  this.pingResp = true\r\n}\r\n\r\n/**\r\n * _handleConnack\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\nMqttClient.prototype._handleConnack = function (packet) {\r\n  debug('_handleConnack')\r\n  var options = this.options\r\n  var version = options.protocolVersion\r\n  var rc = version === 5 ? packet.reasonCode : packet.returnCode\r\n\r\n  clearTimeout(this.connackTimer)\r\n\r\n  if (packet.properties) {\r\n    if (packet.properties.topicAliasMaximum) {\r\n      if (!options.properties) { options.properties = {} }\r\n      options.properties.topicAliasMaximum = packet.properties.topicAliasMaximum\r\n    }\r\n    if (packet.properties.serverKeepAlive && options.keepalive) {\r\n      options.keepalive = packet.properties.serverKeepAlive\r\n      this._shiftPingInterval()\r\n    }\r\n    if (packet.properties.maximumPacketSize) {\r\n      if (!options.properties) { options.properties = {} }\r\n      options.properties.maximumPacketSize = packet.properties.maximumPacketSize\r\n    }\r\n  }\r\n\r\n  if (rc === 0) {\r\n    this.reconnecting = false\r\n    this._onConnect(packet)\r\n  } else if (rc > 0) {\r\n    var err = new Error('Connection refused: ' + errors[rc])\r\n    err.code = rc\r\n    this.emit('error', err)\r\n  }\r\n}\r\n\r\n/**\r\n * _handlePublish\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n/*\r\nthose late 2 case should be rewrite to comply with coding style:\r\n\r\ncase 1:\r\ncase 0:\r\n  // do not wait sending a puback\r\n  // no callback passed\r\n  if (1 === qos) {\r\n    this._sendPacket({\r\n      cmd: 'puback',\r\n      messageId: messageId\r\n    });\r\n  }\r\n  // emit the message event for both qos 1 and 0\r\n  this.emit('message', topic, message, packet);\r\n  this.handleMessage(packet, done);\r\n  break;\r\ndefault:\r\n  // do nothing but every switch mus have a default\r\n  // log or throw an error about unknown qos\r\n  break;\r\n\r\nfor now i just suppressed the warnings\r\n*/\r\nMqttClient.prototype._handlePublish = function (packet, done) {\r\n  debug('_handlePublish: packet %o', packet)\r\n  done = typeof done !== 'undefined' ? done : nop\r\n  var topic = packet.topic.toString()\r\n  var message = packet.payload\r\n  var qos = packet.qos\r\n  var messageId = packet.messageId\r\n  var that = this\r\n  var options = this.options\r\n  var validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153]\r\n  debug('_handlePublish: qos %d', qos)\r\n  switch (qos) {\r\n    case 2: {\r\n      options.customHandleAcks(topic, message, packet, function (error, code) {\r\n        if (!(error instanceof Error)) {\r\n          code = error\r\n          error = null\r\n        }\r\n        if (error) { return that.emit('error', error) }\r\n        if (validReasonCodes.indexOf(code) === -1) { return that.emit('error', new Error('Wrong reason code for pubrec')) }\r\n        if (code) {\r\n          that._sendPacket({cmd: 'pubrec', messageId: messageId, reasonCode: code}, done)\r\n        } else {\r\n          that.incomingStore.put(packet, function () {\r\n            that._sendPacket({cmd: 'pubrec', messageId: messageId}, done)\r\n          })\r\n        }\r\n      })\r\n      break\r\n    }\r\n    case 1: {\r\n      // emit the message event\r\n      options.customHandleAcks(topic, message, packet, function (error, code) {\r\n        if (!(error instanceof Error)) {\r\n          code = error\r\n          error = null\r\n        }\r\n        if (error) { return that.emit('error', error) }\r\n        if (validReasonCodes.indexOf(code) === -1) { return that.emit('error', new Error('Wrong reason code for puback')) }\r\n        if (!code) { that.emit('message', topic, message, packet) }\r\n        that.handleMessage(packet, function (err) {\r\n          if (err) {\r\n            return done && done(err)\r\n          }\r\n          that._sendPacket({cmd: 'puback', messageId: messageId, reasonCode: code}, done)\r\n        })\r\n      })\r\n      break\r\n    }\r\n    case 0:\r\n      // emit the message event\r\n      this.emit('message', topic, message, packet)\r\n      this.handleMessage(packet, done)\r\n      break\r\n    default:\r\n      // do nothing\r\n      debug('_handlePublish: unknown QoS. Doing nothing.')\r\n      // log or throw an error about unknown qos\r\n      break\r\n  }\r\n}\r\n\r\n/**\r\n * Handle messages with backpressure support, one at a time.\r\n * Override at will.\r\n *\r\n * @param Packet packet the packet\r\n * @param Function callback call when finished\r\n * @api public\r\n */\r\nMqttClient.prototype.handleMessage = function (packet, callback) {\r\n  callback()\r\n}\r\n\r\n/**\r\n * _handleAck\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\n\r\nMqttClient.prototype._handleAck = function (packet) {\r\n  /* eslint no-fallthrough: \"off\" */\r\n  var messageId = packet.messageId\r\n  var type = packet.cmd\r\n  var response = null\r\n  var cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null\r\n  var that = this\r\n  var err\r\n\r\n  if (!cb) {\r\n    debug('_handleAck :: Server sent an ack in error. Ignoring.')\r\n    // Server sent an ack in error, ignore it.\r\n    return\r\n  }\r\n\r\n  // Process\r\n  debug('_handleAck :: packet type', type)\r\n  switch (type) {\r\n    case 'pubcomp':\r\n      // same thing as puback for QoS 2\r\n    case 'puback':\r\n      var pubackRC = packet.reasonCode\r\n      // Callback - we're done\r\n      if (pubackRC && pubackRC > 0 && pubackRC !== 16) {\r\n        err = new Error('Publish error: ' + errors[pubackRC])\r\n        err.code = pubackRC\r\n        cb(err, packet)\r\n      }\r\n      delete this.outgoing[messageId]\r\n      this.outgoingStore.del(packet, cb)\r\n      break\r\n    case 'pubrec':\r\n      response = {\r\n        cmd: 'pubrel',\r\n        qos: 2,\r\n        messageId: messageId\r\n      }\r\n      var pubrecRC = packet.reasonCode\r\n\r\n      if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {\r\n        err = new Error('Publish error: ' + errors[pubrecRC])\r\n        err.code = pubrecRC\r\n        cb(err, packet)\r\n      } else {\r\n        this._sendPacket(response)\r\n      }\r\n      break\r\n    case 'suback':\r\n      delete this.outgoing[messageId]\r\n      for (var grantedI = 0; grantedI < packet.granted.length; grantedI++) {\r\n        if ((packet.granted[grantedI] & 0x80) !== 0) {\r\n          // suback with Failure status\r\n          var topics = this.messageIdToTopic[messageId]\r\n          if (topics) {\r\n            topics.forEach(function (topic) {\r\n              delete that._resubscribeTopics[topic]\r\n            })\r\n          }\r\n        }\r\n      }\r\n      cb(null, packet)\r\n      break\r\n    case 'unsuback':\r\n      delete this.outgoing[messageId]\r\n      cb(null)\r\n      break\r\n    default:\r\n      that.emit('error', new Error('unrecognized packet type'))\r\n  }\r\n\r\n  if (this.disconnecting &&\r\n      Object.keys(this.outgoing).length === 0) {\r\n    this.emit('outgoingEmpty')\r\n  }\r\n}\r\n\r\n/**\r\n * _handlePubrel\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\nMqttClient.prototype._handlePubrel = function (packet, callback) {\r\n  debug('handling pubrel packet')\r\n  callback = typeof callback !== 'undefined' ? callback : nop\r\n  var messageId = packet.messageId\r\n  var that = this\r\n\r\n  var comp = {cmd: 'pubcomp', messageId: messageId}\r\n\r\n  that.incomingStore.get(packet, function (err, pub) {\r\n    if (!err) {\r\n      that.emit('message', pub.topic, pub.payload, pub)\r\n      that.handleMessage(pub, function (err) {\r\n        if (err) {\r\n          return callback(err)\r\n        }\r\n        that.incomingStore.del(pub, nop)\r\n        that._sendPacket(comp, callback)\r\n      })\r\n    } else {\r\n      that._sendPacket(comp, callback)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * _handleDisconnect\r\n *\r\n * @param {Object} packet\r\n * @api private\r\n */\r\nMqttClient.prototype._handleDisconnect = function (packet) {\r\n  this.emit('disconnect', packet)\r\n}\r\n\r\n/**\r\n * _nextId\r\n * @return unsigned int\r\n */\r\nMqttClient.prototype._nextId = function () {\r\n  // id becomes current state of this.nextId and increments afterwards\r\n  var id = this.nextId++\r\n  // Ensure 16 bit unsigned int (max 65535, nextId got one higher)\r\n  if (this.nextId === 65536) {\r\n    this.nextId = 1\r\n  }\r\n  return id\r\n}\r\n\r\n/**\r\n * getLastMessageId\r\n * @return unsigned int\r\n */\r\nMqttClient.prototype.getLastMessageId = function () {\r\n  return (this.nextId === 1) ? 65535 : (this.nextId - 1)\r\n}\r\n\r\n/**\r\n * _resubscribe\r\n * @api private\r\n */\r\nMqttClient.prototype._resubscribe = function (connack) {\r\n  debug('_resubscribe')\r\n  var _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics)\r\n  if (!this._firstConnection &&\r\n      (this.options.clean || (this.options.protocolVersion === 5 && !connack.sessionPresent)) &&\r\n      _resubscribeTopicsKeys.length > 0) {\r\n    if (this.options.resubscribe) {\r\n      if (this.options.protocolVersion === 5) {\r\n        debug('_resubscribe: protocolVersion 5')\r\n        for (var topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {\r\n          var resubscribeTopic = {}\r\n          resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]]\r\n          resubscribeTopic.resubscribe = true\r\n          this.subscribe(resubscribeTopic, {properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties})\r\n        }\r\n      } else {\r\n        this._resubscribeTopics.resubscribe = true\r\n        this.subscribe(this._resubscribeTopics)\r\n      }\r\n    } else {\r\n      this._resubscribeTopics = {}\r\n    }\r\n  }\r\n\r\n  this._firstConnection = false\r\n}\r\n\r\n/**\r\n * _onConnect\r\n *\r\n * @api private\r\n */\r\nMqttClient.prototype._onConnect = function (packet) {\r\n  if (this.disconnected) {\r\n    this.emit('connect', packet)\r\n    return\r\n  }\r\n\r\n  var that = this\r\n\r\n  this._setupPingTimer()\r\n  this._resubscribe(packet)\r\n\r\n  this.connected = true\r\n\r\n  function startStreamProcess () {\r\n    var outStore = that.outgoingStore.createStream()\r\n\r\n    function clearStoreProcessing () {\r\n      that._storeProcessing = false\r\n      that._packetIdsDuringStoreProcessing = {}\r\n    }\r\n\r\n    that.once('close', remove)\r\n    outStore.on('error', function (err) {\r\n      clearStoreProcessing()\r\n      that.removeListener('close', remove)\r\n      that.emit('error', err)\r\n    })\r\n\r\n    function remove () {\r\n      outStore.destroy()\r\n      outStore = null\r\n      clearStoreProcessing()\r\n    }\r\n\r\n    function storeDeliver () {\r\n      // edge case, we wrapped this twice\r\n      if (!outStore) {\r\n        return\r\n      }\r\n      that._storeProcessing = true\r\n\r\n      var packet = outStore.read(1)\r\n\r\n      var cb\r\n\r\n      if (!packet) {\r\n        // read when data is available in the future\r\n        outStore.once('readable', storeDeliver)\r\n        return\r\n      }\r\n\r\n      // Skip already processed store packets\r\n      if (that._packetIdsDuringStoreProcessing[packet.messageId]) {\r\n        storeDeliver()\r\n        return\r\n      }\r\n\r\n      // Avoid unnecessary stream read operations when disconnected\r\n      if (!that.disconnecting && !that.reconnectTimer) {\r\n        cb = that.outgoing[packet.messageId] ? that.outgoing[packet.messageId].cb : null\r\n        that.outgoing[packet.messageId] = {\r\n          volatile: false,\r\n          cb: function (err, status) {\r\n            // Ensure that the original callback passed in to publish gets invoked\r\n            if (cb) {\r\n              cb(err, status)\r\n            }\r\n\r\n            storeDeliver()\r\n          }\r\n        }\r\n        that._packetIdsDuringStoreProcessing[packet.messageId] = true\r\n        that._sendPacket(packet)\r\n      } else if (outStore.destroy) {\r\n        outStore.destroy()\r\n      }\r\n    }\r\n\r\n    outStore.on('end', function () {\r\n      var allProcessed = true\r\n      for (var id in that._packetIdsDuringStoreProcessing) {\r\n        if (!that._packetIdsDuringStoreProcessing[id]) {\r\n          allProcessed = false\r\n          break\r\n        }\r\n      }\r\n      if (allProcessed) {\r\n        clearStoreProcessing()\r\n        that.removeListener('close', remove)\r\n        that.emit('connect', packet)\r\n      } else {\r\n        startStreamProcess()\r\n      }\r\n    })\r\n    storeDeliver()\r\n  }\r\n  // start flowing\r\n  startStreamProcess()\r\n}\r\n\r\nmodule.exports = MqttClient\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","sendPacket","client","packet","cb","debug","emit","result","mqttPacket","writeToStream","stream","options","once","flush","queue","Object","keys","forEach","messageId","Error","flushVolatile","volatile","storeAndSend","cbStorePut","cmd","outgoingStore","put","storedPacket","err","nop","error","MqttClient","streamBuilder","k","that","defaultConnectOptions","protocol","protocolVersion","username","keepalive","reconnectPeriod","rejectUnauthorized","clientId","Math","random","toString","substr","customHandleAcks","arguments","Store","incomingStore","queueQoSZero","undefined","_resubscribeTopics","messageIdToTopic","pingTimer","disconnecting","connected","reconnectTimer","connackTimer","_storeProcessing","_packetIdsDuringStoreProcessing","nextId","max","floor","outgoing","_firstConnection","on","deliver","entry","shift","_sendPacket","clearTimeout","clear","_setupReconnect","EventEmitter","call","_setupStream","process","Writable","inherits","reInterval","validations","xtend","nextTick","callback","setTimeout","setImmediate","reschedulePings","protocolId","connectTimeout","clean","resubscribe","socketErrors","errors","prototype","MqttClient.prototype._setupStream","nextTickWork","packets","length","work","done","completeParse","_handlePacket","writable","parser","_clearReconnect","push","_write","writable._write","buf","enc","parse","pipe","streamErrorHandler","message","includes","code","connectPacket","create","bind","properties","authenticationMethod","authenticationData","end","authPacket","reasonCode","setMaxListeners","_cleanUp","MqttClient.prototype._handlePacket","maximumPacketSize","reasonString","_handlePublish","_handleAck","_handlePubrel","_handleConnack","_handlePingresp","_handleDisconnect","_checkDisconnecting","MqttClient.prototype._checkDisconnecting","publish","MqttClient.prototype.publish","topic","opts","defaultOpts","qos","retain","dup","payload","_nextId","topicAlias","topicAliasMaximum","_storePacket","subscribe","MqttClient.prototype.subscribe","args","Array","i","subs","obj","pop","version","invalidTopic","validateTopics","nl","rap","rh","isArray","hasOwnProperty","currentOpts","subscriptions","topics","sub","granted","unsubscribe","MqttClient.prototype.unsubscribe","unsubscriptions","MqttClient.prototype.end","force","closeStores","disconnected","close","e1","e2","_deferredReconnect","finish","removeOutgoingMessage","MqttClient.prototype.removeOutgoingMessage","del","reconnect","MqttClient.prototype.reconnect","f","_reconnect","MqttClient.prototype._reconnect","MqttClient.prototype._setupReconnect","reconnecting","setInterval","MqttClient.prototype._clearReconnect","clearInterval","MqttClient.prototype._cleanUp","forced","destroy","removeListener","MqttClient.prototype._sendPacket","_shiftPingInterval","MqttClient.prototype._storePacket","_setupPingTimer","MqttClient.prototype._setupPingTimer","pingResp","_checkPing","MqttClient.prototype._shiftPingInterval","reschedule","MqttClient.prototype._checkPing","MqttClient.prototype._handlePingresp","MqttClient.prototype._handleConnack","rc","returnCode","serverKeepAlive","_onConnect","MqttClient.prototype._handlePublish","validReasonCodes","indexOf","handleMessage","MqttClient.prototype.handleMessage","MqttClient.prototype._handleAck","type","response","pubackRC","pubrecRC","grantedI","MqttClient.prototype._handlePubrel","comp","get","pub","MqttClient.prototype._handleDisconnect","MqttClient.prototype._nextId","id","getLastMessageId","MqttClient.prototype.getLastMessageId","_resubscribe","MqttClient.prototype._resubscribe","connack","_resubscribeTopicsKeys","sessionPresent","topicI","resubscribeTopic","MqttClient.prototype._onConnect","startStreamProcess","clearStoreProcessing","remove","outStore","storeDeliver","read","status","createStream","allProcessed"]
}
