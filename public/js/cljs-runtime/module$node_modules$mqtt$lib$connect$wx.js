shadow$provide.module$node_modules$mqtt$lib$connect$wx=function(global,require,module,exports){function buildProxy(){var proxy=new Transform;proxy._write=function(chunk,encoding,next){socketTask.send({data:chunk.buffer,success:function(){next()},fail:function(errMsg){next(Error(errMsg))}})};proxy._flush=function(done){socketTask.close({success:function(){done()}})};return proxy}function setDefaultOpts(opts){opts.hostname||(opts.hostname="localhost");opts.path||(opts.path="/");opts.wsOptions||(opts.wsOptions=
{})}function buildUrl(opts,client){var protocol="wxs"===opts.protocol?"wss":"ws",url=protocol+"://"+opts.hostname+opts.path;opts.port&&80!==opts.port&&443!==opts.port&&(url=protocol+"://"+opts.hostname+":"+opts.port+opts.path);"function"===typeof opts.transformWsUrl&&(url=opts.transformWsUrl(url,opts,client));return url}function bindEventHandler(){socketTask.onOpen(function(){stream.setReadable(proxy);stream.setWritable(proxy);stream.emit("connect")});socketTask.onMessage(function(res){res=res.data;
res=res instanceof ArrayBuffer?Buffer.from(res):Buffer.from(res,"utf8");proxy.push(res)});socketTask.onClose(function(){stream.end();stream.destroy()});socketTask.onError(function(res){stream.destroy(Error(res.errMsg))})}var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";var Transform=require("module$node_modules$mqtt$node_modules$readable_stream$readable_browser").Transform,duplexify=require("module$node_modules$duplexify$index"),socketTask,proxy,stream;module.exports=function(client,
opts){opts.hostname=opts.hostname||opts.host;if(!opts.hostname)throw Error("Could not determine host. Specify host manually.");var websocketSubProtocol="MQIsdp"===opts.protocolId&&3===opts.protocolVersion?"mqttv3.1":"mqtt";setDefaultOpts(opts);client=buildUrl(opts,client);socketTask=wx.connectSocket({url:client,protocols:[websocketSubProtocol]});proxy=buildProxy();stream=duplexify.obj();stream._destroy=function(err,cb){socketTask.close({success:function(){cb&&cb(err)}})};var destroyRef=stream.destroy;
stream.destroy=function(){stream.destroy=destroyRef;var self=this;setTimeout(function(){socketTask.close({fail:function(){self._destroy(Error())}})},0)}.bind(stream);bindEventHandler();return stream}}
//# sourceMappingURL=module$node_modules$mqtt$lib$connect$wx.js.map
