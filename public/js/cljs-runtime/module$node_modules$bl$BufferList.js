shadow$provide.module$node_modules$bl$BufferList=function(global,require,module,exports){function BufferList(buf){if(!(this instanceof BufferList))return new BufferList(buf);BufferList._init.call(this,buf)}const {Buffer}=require("module$node_modules$bl$node_modules$buffer$index"),symbol=Symbol.for("BufferList");BufferList._init=function(buf){Object.defineProperty(this,symbol,{value:!0});this._bufs=[];this.length=0;buf&&this.append(buf)};BufferList.prototype._new=function(buf){return new BufferList(buf)};
BufferList.prototype._offset=function(offset){if(0===offset)return[0,0];let tot=0;for(let i=0;i<this._bufs.length;i++){const _t=tot+this._bufs[i].length;if(offset<_t||i===this._bufs.length-1)return[i,offset-tot];tot=_t}};BufferList.prototype._reverseOffset=function(blOffset){const bufferId=blOffset[0];blOffset=blOffset[1];for(let i=0;i<bufferId;i++)blOffset+=this._bufs[i].length;return blOffset};BufferList.prototype.get=function(index){if(!(index>this.length||0>index))return index=this._offset(index),
this._bufs[index[0]][index[1]]};BufferList.prototype.slice=function(start,end){"number"===typeof start&&0>start&&(start+=this.length);"number"===typeof end&&0>end&&(end+=this.length);return this.copy(null,0,start,end)};BufferList.prototype.copy=function(dst,dstStart,srcStart,srcEnd){if("number"!==typeof srcStart||0>srcStart)srcStart=0;if("number"!==typeof srcEnd||srcEnd>this.length)srcEnd=this.length;if(srcStart>=this.length||0>=srcEnd)return dst||Buffer.alloc(0);const copy=!!dst,off=this._offset(srcStart),
len=srcEnd-srcStart;var bytes=len;let bufoff=copy&&dstStart||0,start=off[1];if(0===srcStart&&srcEnd===this.length){if(!copy)return 1===this._bufs.length?this._bufs[0]:Buffer.concat(this._bufs,this.length);for(bytes=0;bytes<this._bufs.length;bytes++)this._bufs[bytes].copy(dst,bufoff),bufoff+=this._bufs[bytes].length;return dst}if(bytes<=this._bufs[off[0]].length-start)return copy?this._bufs[off[0]].copy(dst,dstStart,start,start+bytes):this._bufs[off[0]].slice(start,start+bytes);copy||(dst=Buffer.allocUnsafe(len));
for(dstStart=off[0];dstStart<this._bufs.length;dstStart++){srcStart=this._bufs[dstStart].length-start;if(bytes>srcStart)this._bufs[dstStart].copy(dst,bufoff,start),bufoff+=srcStart;else{this._bufs[dstStart].copy(dst,bufoff,start,start+bytes);bufoff+=srcStart;break}bytes-=srcStart;start&&(start=0)}return dst.length>bufoff?dst.slice(0,bufoff):dst};BufferList.prototype.shallowSlice=function(start,end){start=start||0;end="number"!==typeof end?this.length:end;0>start&&(start+=this.length);0>end&&(end+=
this.length);if(start===end)return this._new();start=this._offset(start);end=this._offset(end);const buffers=this._bufs.slice(start[0],end[0]+1);0===end[1]?buffers.pop():buffers[buffers.length-1]=buffers[buffers.length-1].slice(0,end[1]);0!==start[1]&&(buffers[0]=buffers[0].slice(start[1]));return this._new(buffers)};BufferList.prototype.toString=function(encoding,start,end){return this.slice(start,end).toString(encoding)};BufferList.prototype.consume=function(bytes){bytes=Math.trunc(bytes);if(Number.isNaN(bytes)||
0>=bytes)return this;for(;this._bufs.length;)if(bytes>=this._bufs[0].length)bytes-=this._bufs[0].length,this.length-=this._bufs[0].length,this._bufs.shift();else{this._bufs[0]=this._bufs[0].slice(bytes);this.length-=bytes;break}return this};BufferList.prototype.duplicate=function(){const copy=this._new();for(let i=0;i<this._bufs.length;i++)copy.append(this._bufs[i]);return copy};BufferList.prototype.append=function(buf){if(null==buf)return this;if(buf.buffer)this._appendBuffer(Buffer.from(buf.buffer,
buf.byteOffset,buf.byteLength));else if(Array.isArray(buf))for(var i=0;i<buf.length;i++)this.append(buf[i]);else if(this._isBufferList(buf))for(i=0;i<buf._bufs.length;i++)this.append(buf._bufs[i]);else"number"===typeof buf&&(buf=buf.toString()),this._appendBuffer(Buffer.from(buf));return this};BufferList.prototype._appendBuffer=function(buf){this._bufs.push(buf);this.length+=buf.length};BufferList.prototype.indexOf=function(search,offset,encoding){void 0===encoding&&"string"===typeof offset&&(encoding=
offset,offset=void 0);if("function"===typeof search||Array.isArray(search))throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');"number"===typeof search?search=Buffer.from([search]):"string"===typeof search?search=Buffer.from(search,encoding):this._isBufferList(search)?search=search.slice():Array.isArray(search.buffer)?search=Buffer.from(search.buffer,search.byteOffset,search.byteLength):Buffer.isBuffer(search)||(search=Buffer.from(search));offset=
Number(offset||0);isNaN(offset)&&(offset=0);0>offset&&(offset=this.length+offset);0>offset&&(offset=0);if(0===search.length)return offset>this.length?this.length:offset;encoding=this._offset(offset);offset=encoding[0];for(var buffOffset=encoding[1];offset<this._bufs.length;offset++){for(encoding=this._bufs[offset];buffOffset<encoding.length;)if(encoding.length-buffOffset>=search.length){buffOffset=encoding.indexOf(search,buffOffset);if(-1!==buffOffset)return this._reverseOffset([offset,buffOffset]);
buffOffset=encoding.length-search.length+1}else{const revOffset=this._reverseOffset([offset,buffOffset]);if(this._match(revOffset,search))return revOffset;buffOffset++}buffOffset=0}return-1};BufferList.prototype._match=function(offset,search){if(this.length-offset<search.length)return!1;for(let searchOffset=0;searchOffset<search.length;searchOffset++)if(this.get(offset+searchOffset)!==search[searchOffset])return!1;return!0};(function(){const methods={readDoubleBE:8,readDoubleLE:8,readFloatBE:4,readFloatLE:4,
readInt32BE:4,readInt32LE:4,readUInt32BE:4,readUInt32LE:4,readInt16BE:2,readInt16LE:2,readUInt16BE:2,readUInt16LE:2,readInt8:1,readUInt8:1,readIntBE:null,readIntLE:null,readUIntBE:null,readUIntLE:null};for(const m$jscomp$0 in methods)(function(m){BufferList.prototype[m]=null===methods[m]?function(offset,byteLength){return this.slice(offset,offset+byteLength)[m](0,byteLength)}:function(offset=0){return this.slice(offset,offset+methods[m])[m](0)}})(m$jscomp$0)})();BufferList.prototype._isBufferList=
function(b){return b instanceof BufferList||BufferList.isBufferList(b)};BufferList.isBufferList=function(b){return null!=b&&b[symbol]};module.exports=BufferList}
//# sourceMappingURL=module$node_modules$bl$BufferList.js.map
