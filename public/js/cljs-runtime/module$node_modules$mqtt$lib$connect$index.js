shadow$provide.module$node_modules$mqtt$lib$connect$index=function(global,require,module,exports){function parseAuthOptions(opts){var matches;opts.auth&&((matches=opts.auth.match(/^(.+):(.+)$/))?(opts.username=matches[1],opts.password=matches[2]):opts.username=opts.auth)}function connect(brokerUrl,opts){debug("connecting to an MQTT broker...");"object"!==typeof brokerUrl||opts||(opts=brokerUrl,brokerUrl=null);opts=opts||{};if(brokerUrl){brokerUrl=url.parse(brokerUrl,!0);null!=brokerUrl.port&&(brokerUrl.port=
Number(brokerUrl.port));opts=xtend(brokerUrl,opts);if(null===opts.protocol)throw Error("Missing protocol");opts.protocol=opts.protocol.replace(/:$/,"")}parseAuthOptions(opts);opts.query&&"string"===typeof opts.query.clientId&&(opts.clientId=opts.query.clientId);if(opts.cert&&opts.key)if(opts.protocol){if(-1===["mqtts","wss","wxs","alis"].indexOf(opts.protocol))switch(opts.protocol){case "mqtt":opts.protocol="mqtts";break;case "ws":opts.protocol="wss";break;case "wx":opts.protocol="wxs";break;case "ali":opts.protocol=
"alis";break;default:throw Error('Unknown protocol for secure connection: "'+opts.protocol+'"!');}}else throw Error("Missing secure protocol key");if(!protocols[opts.protocol]){var isSecure=-1!==["mqtts","wss"].indexOf(opts.protocol);opts.protocol="mqtt mqtts ws wss wx wxs ali alis".split(" ").filter(function(key,index){return isSecure&&0===index%2?!1:"function"===typeof protocols[key]})[0]}if(!1===opts.clean&&!opts.clientId)throw Error("Missing clientId for unclean clients");opts.protocol&&(opts.defaultProtocol=
opts.protocol);brokerUrl=new MqttClient(function(client){opts.servers&&(client._reconnectCount&&client._reconnectCount!==opts.servers.length||(client._reconnectCount=0),opts.host=opts.servers[client._reconnectCount].host,opts.port=opts.servers[client._reconnectCount].port,opts.protocol=opts.servers[client._reconnectCount].protocol?opts.servers[client._reconnectCount].protocol:opts.defaultProtocol,opts.hostname=opts.host,client._reconnectCount++);debug("calling streambuilder for",opts.protocol);return protocols[opts.protocol](client,
opts)},opts);brokerUrl.on("error",function(){});return brokerUrl}global=require("module$node_modules$process$browser");"use strict";var MqttClient=require("module$node_modules$mqtt$lib$client");exports=require("module$node_modules$mqtt$lib$store");var url=require("module$node_modules$url$url"),xtend=require("module$node_modules$xtend$immutable"),debug=require("module$node_modules$debug$src$browser")("mqttjs"),protocols={};"undefined"!==typeof global&&"browser"!==global.title||"function"!==typeof __webpack_require__?
(protocols.mqtt=require("module$node_modules$mqtt$lib$connect$tcp"),protocols.tcp=require("module$node_modules$mqtt$lib$connect$tcp"),protocols.ssl=require("module$node_modules$mqtt$lib$connect$tls"),protocols.tls=require("module$node_modules$mqtt$lib$connect$tls"),protocols.mqtts=require("module$node_modules$mqtt$lib$connect$tls")):(protocols.wx=require("module$node_modules$mqtt$lib$connect$wx"),protocols.wxs=require("module$node_modules$mqtt$lib$connect$wx"),protocols.ali=require("module$node_modules$mqtt$lib$connect$ali"),
protocols.alis=require("module$node_modules$mqtt$lib$connect$ali"));protocols.ws=require("module$node_modules$mqtt$lib$connect$ws");protocols.wss=require("module$node_modules$mqtt$lib$connect$ws");module.exports=connect;module.exports.connect=connect;module.exports.MqttClient=MqttClient;module.exports.Store=exports}
//# sourceMappingURL=module$node_modules$mqtt$lib$connect$index.js.map
