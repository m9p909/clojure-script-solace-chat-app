{"version":3,"sources":["simple_chat_app/core.cljs"],"mappings":";;AAUA,gCAAA,hCAAMA,wEAAUC;AAAhB,AACE,OAACC,8CAAMC,cAAI,AAACC,6CAAKH,IAAI,mDAAA,nDAACI;AAAD,AAAa,OAACC,gBAAK,sDAAA,rDAAG,6CAAA,7CAACC;;;AAK9C,AAAKC,gCAAS,gDAAA,hDAACC;AAGf,AAAKC,+BAAQ,8BAAA,9BAACV;AACd,AAAKW,4BAAK,gDAAA,hDAACF;AACX,AAAKG,uCAAgB,gDAAA,hDAACH;AAEtB,AAAKI,iCAAU,gDAAA,hDAACJ;AAEhB,8CAAA,9CAAMK,oGAAwBC;AAA9B,AAAwC,OAACC,sBAAOH,+BAAU,6CAAA,AAAAI,7CAACC,6DAAML,gCAAUE;;AAO3E,oCAAA,pCAAMI,gFACHC;AADH,AAEE,OAAYC,eAAQ,AAACC,qBAAQF;;AAE/B,oCAAA,pCAAMG,gFAAWC;AAAjB,AACE,sIAAA,2EAAA,1MAACC,0DAAQ,AAAQJ,WAAQG;;AAE3B,6BAAA,7BAAKE;AACL,AAAKC,8BACH,mDAAA,nDAAUC,6EAA+B,qBAAA,2CAAA,qDAAA,rHAACN;AAE5C,+BAAA,/BAAKK,yCAAiB;AAAA,AACE,wEAAA,jEAAYA,sCAAOD;AAAnB,AAA0B,gHAAA,zGAACG;;;AAGnD,+BAAA,/BAAKF,yCAAiB,WAAKG,MAAMC;AAAX,AACE,OAACjB,4CAAuB,AAACS,kCAAUQ;;AAE3D,oCAAA,pCAAMC,gFAAcD;AAApB,AACE,OAAUJ,oCAAOD,2BAAM,AAACP,kCAAUY;;AAOpC,yCAAA,zCAAME,0FAAmBC,SAASC,QAAQJ;AAA1C,AAAA,kDAAA,sEAAA,mEAAA,mEAAA,/IAEaG,oEACDC,mEACAJ,sEACE,AAAMK;;AAIpB,sCAAA,tCAAMC,oFAAgBtB;AAAtB,AACE,IAAAuB,mBAAA,AAAAC,mDAAA;AAAA,AAAA,AAAAC,kCAAA;AAAA,AAAA,IAAAC,mBAAA,iBAAAC,wBAAA,WAAAC;AAAA,AAAA,IAAAC,kBAAA,CAAAD,YAAA;AAAA,AAAA,GAAA,CAAAC,oBAAA;AAAA,IAAAC,aAAA,AAAKb,kCAAajB;IAAlB4B,kBAAAA;AAAA,AAAA,OAAAG,6CAAAH,gBAAAE;;AAAA;;;AAAA,AAAA;;;AAAA,AAAA,IAAAE,iBAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,CAAAA,eAAA,OAAAC;;AAAA,CAAAD,eAAA,OAAA;;AAAAA;;uFAAAJ;;AAAA,AAAA,IAAAM,2BAAA,iBAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA,AAAAR,sBAAAC;AAAA,AAAA,GAAA,AAAAQ,mCAAAD,sBAAA;AAAA;;AAAAA;;;;gBAAA,IAAAE,oBAAAC;AAAA,AAAA,IAAAC,uBAAAX;AAAA,AAAA,CAAAW,qBAAA,OAAAF;;AAAAE;AAAA,GAAA,AAAAC,cAAA,CAAAZ,YAAA;AAAA,IAAAa,uBAAAb;AAAA,AAAA,CAAAa,qBAAA,OAAA,AAAAC,gBAAA,CAAAd,YAAA;;AAAAa;AAAA,MAAAJ;;;AAAA;;AAAA,AAAA,GAAA,AAAAD,mCAAAF,yBAAA;AAAA,eAAAN;;;;AAAAM;;;;;8EAAAN;;;;;uFAAAA;;;;;;;;;IAAAe,uBAAA,iBAAAC,iBAAA,AAAAlB;AAAA,AAAA,CAAAkB,eAAAC,AAAA,OAAAtB;;AAAAqB;;AAAA,AAAA,OAAAE,2DAAAH;;;AAAApB;;AAEF,iCAAA,jCAAMwB;AAAN,AACE,uGAAA,AAAA7C,+CAAA,IAAA,AAAAA,1JAAC8C,uHAAOvD,mDAAcI;;AACtB,IAAMG,iBAAS,uCAAA,AAAAE,4EAAA,AAAAA,nHAACgB,uDAAmBzB,+BAASE,6CAASE;AAArD,AACE,AAACyB,oCAAetB;;AAClB,kEAAA,3DAACC,sBAAOJ;;AAOV,iCAAA,jCAAMsD;AAAN,AAAA,0FAAA,mDAAA,mFAAA,iDAAA,aAAA,AAAAjD,uDAAA,mFAAA,1HAEoBT,gNAEjB,AAAC2D,oDAAY,WAAKC,IAAIrD;AAAT,AACE,IAAMsD,uBAAqB,AAACC,6CAAE5D,6BAAQ,AAAA,yFAAUK;AAAhD,AAAA,0FAAA,4GAAA,2CAAA,iGAAA,zCAE4C,wBAAA,AAAA,WAAA,jCAAMsD,2FACR,CAAA,oDAAaD,uBACpD,6BAAA,gLAAA,3MAAM,GAAKC,wBACT,iKAAA,pHAAK,qDAAA,rDAACE,4CAAIxD,6FACZ,qDAAA,rDAACwD,4CAAIxD;4DAX1B,mFAAA,sDAAA,2CAAA,+DAAA,WAAAiD,vTAIG,AAAA/C,gBAQMJ;AAZT,AAauB,IAAA2D,WAAa,AAAAR;IAAbS,eAAC,AAACX;AAAF,AAAA,QAAAW,6CAAAA,2CAAAD,YAAAC,uBAAAD;GAbvB,yDAAA,YAAA,mFAAA,kFAAA,2CAAA,sDAAA,AAAAvD,sDAAA,+DAAA,WAAAgD,hHAciCrD;AAdjC,AAc6D,OAACI,sBAAOJ,qCAAgB,AAAA,AAAAqD;mBAdrF,mFAAA,oFAAA,2CAAA,qDAAA,iBAAA;;AAmBA,kCAAA,lCAAMW;AAAN,AAAA,0FAAA,mDAAA,mFAAA,uDAAA,mBAAA,mFAAA,wDAAA,mFAAA,sDAAA,2CAAA,+DAAA,WAAAF;AAAA,AAIuB,IAAAG,WAA0B,AAAAH;IAA1BI,eAAC,gDAAA,hDAAC9D,sBAAOL;AAAT,AAAA,QAAAmE,6CAAAA,2CAAAD,YAAAC,uBAAAD;WAJvB,mFAAA,kFAAA,2CAAA,sDAAA,AAAA5D,+CAAA,+DAAA,WAAA0D,zGAKiCnE;AALjC,AAMwB,OAACQ,sBAAOR,8BAAS,AAAA,AAAAmE;mBANzC,mFAAA,oFAAA,2CAAA,qDAAA,iBAAA;;AAUA,gCAAA,2CAAA,iGAAA,5KAAKI,4IACsBH,gGACDV;AAK1B,iCAAA,jCAAMc;AAAN,AAAA,0FAAA,qEAAA,mFAAA,iDAAA,2CAAA,mFAGI,0EAAA,AAAA/D,1EAACsD,4CAAIQ,8CAAUpE;;AAInB,kCAAA,lCAAMsE;AAAN,AACE,wDAAA,jDAACC,oIAAUF,uCAAW,wBAAA,xBAAiBG;;AAEzC,kCAAA,lCAAeC;AAAf,AACE,OAACH","names":["simple-chat-app.core/rand-str","len","cljs.core.apply","cljs.core/str","cljs.core.take","cljs.core.repeatedly","cljs.core/char","cljs.core.rand","simple-chat-app.core/username","reagent.core.atom","simple-chat-app.core/user-id","simple-chat-app.core/page","simple-chat-app.core/current-message","simple-chat-app.core/chat-data","simple-chat-app.core/update-local-chat-data","chat-obj","cljs.core/reset!","cljs.core/deref","cljs.core.conj","simple-chat-app.core/clj->json","ds","js/JSON","cljs.core/clj->js","simple-chat-app.core/json->clj","string","cljs.core.js__GT_clj","simple-chat-app.core/topic","simple-chat-app.core/client","js/module$node_modules$mqtt$lib$connect$index","cljs.core.println","topic","message","simple-chat-app.core/send-message","simple-chat-app.core/build-new-message","username","user-id","js/Date","simple-chat-app.core/post-to-broker","c__32390__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__32391__auto__","switch__32297__auto__","state_39656","state_val_39657","inst_39654","cljs.core.async.impl.ioc-helpers/return-chan","statearr-39658","state-machine__32298__auto__","ret-value__32299__auto__","result__32300__auto__","cljs.core/keyword-identical?","ex__32301__auto__","e39659","statearr-39660","cljs.core/seq","statearr-39661","cljs.core/first","state__32392__auto__","statearr-39662","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","simple-chat-app.core/on-submit","cljs.core.print","p1__39663#","p1__39664#","simple-chat-app.core/chat-page","cljs.core.map_indexed","idx","sent-by-current-user","cljs.core._EQ_","cljs.core.get","G__39666","fexpr__39665","p1__39667#","p1__39668#","simple-chat-app.core/login-page","G__39670","fexpr__39669","simple-chat-app.core/page-map","simple-chat-app.core/home-page","simple-chat-app.core/mount-root","reagent.dom.render","js/document","simple-chat-app.core/init!"],"sourcesContent":["(ns simple-chat-app.core\n    (:require\n      [reagent.core :as r]\n      [reagent.dom :as d]\n      [cljs.core.async :as async :refer [go]]\n      [\"mqtt\" :as mqtt]\n      ))\n;; ------------------------\n;; Utilities\n\n(defn rand-str [len]\n  (apply str (take len (repeatedly #(char (+ (rand 26) 65))))))\n\n\n;; ------------------------\n;; state\n(def username (r/atom \"\")\n\n)\n(def user-id (rand-str 20))\n(def page (r/atom :login-page))\n(def current-message (r/atom \"\"))\n\n(def chat-data (r/atom []))\n\n(defn update-local-chat-data [chat-obj] (reset! chat-data (conj @chat-data chat-obj )))\n\n\n\n;; --------------------------\n;; Solace Messaging\n;; This part is object oriented\n(defn clj->json\n  [ds]\n  (.stringify js/JSON (clj->js ds)))\n\n(defn json->clj [string]\n  (js->clj (.parse js/JSON string) :keywordize-keys true))\n\n(def topic \"lKtrzMTTCOJn7Wbk9Cqsf\")\n(def client\n  (.connect mqtt \"ws://test.mosquitto.org\" (clj->js {:port 8080})))\n\n(.on client \"connect\" (fn []\n                        (.subscribe client topic #(println \"logged in and subscribed\"))))\n\n\n(.on client \"message\" (fn [topic message]\n                        (update-local-chat-data (json->clj message))))\n\n(defn send-message [message]\n  (.publish client topic (clj->json message)))\n\n;; --------------------------\n;; Business\n;;\n\n\n(defn build-new-message [username user-id message]\n  {\n   :username username\n   :user-id user-id\n   :message message\n   :timestamp (.now js/Date)\n   })\n\n\n(defn post-to-broker [chat-obj]\n  (go (send-message chat-obj)))\n\n(defn on-submit []\n  (print @username \":\" @current-message)\n  (let [chat-obj (build-new-message @username user-id @current-message)]\n    (post-to-broker chat-obj))\n  (reset! current-message \"\"))\n\n\n;; -------------------------\n;; Views\n;;\n\n(defn chat-page []\n  [:div\n  [:h3 \"username: \"@username]\n  [:div.border.container\n   (map-indexed (fn [idx chat-obj]\n                  (let [sent-by-current-user (= user-id (:user-id chat-obj))]\n                    [:div.row.p-1.ms-auto.flex-column {\n                                                       :class (when sent-by-current-user \"text-end\")\n                                                       :key (str \"chat-\" idx)}\n                     (when (not sent-by-current-user)\n                       (str (get chat-obj :username) \": \" ))\n                     (get chat-obj :message)  ]))\n        @chat-data)]\n   [:form {:on-submit #((on-submit) (.preventDefault %)) :action \"#\"}\n   [:input.form-control {:value @current-message :on-change #(reset! current-message (-> % .-target .-value))}]\n   [:button.form-control {:type \"submit\"} \"Send\"]]]\n  )\n\n\n(defn login-page []\n  [:div\n   [:label \"Username\"]\n   [:br]\n   [:form {:on-submit #((reset! page :chat-page) (.preventDefault %))}\n   [:input.form-control {:value @username\n            :on-change #(reset! username (-> % .-target .-value))}]\n   [:button.form-control {:type \"submit\"} \"Login\"]]])\n\n\n(def page-map {\n               :login-page login-page\n               :chat-page chat-page\n               })\n\n\n\n(defn home-page []\n  [:div.container\n   [:h2 \"a simple clojure-solace chat app\"]\n   [(get page-map @page)]])\n\n;; Initialize app\n\n(defn mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}