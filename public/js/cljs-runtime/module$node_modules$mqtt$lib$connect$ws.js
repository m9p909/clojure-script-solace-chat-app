shadow$provide.module$node_modules$mqtt$lib$connect$ws=function(global,require,module,exports){function buildUrl(opts,client){let url=opts.protocol+"://"+opts.hostname+":"+opts.port+opts.path;"function"===typeof opts.transformWsUrl&&(url=opts.transformWsUrl(url,opts,client));return url}function setDefaultOpts(opts){opts.hostname||(opts.hostname="localhost");opts.port||(opts.port="wss"===opts.protocol?443:80);opts.path||(opts.path="/");opts.wsOptions||(opts.wsOptions={});IS_BROWSER||"wss"!==opts.protocol||
WSS_OPTIONS.forEach(function(prop){opts.hasOwnProperty(prop)&&!opts.wsOptions.hasOwnProperty(prop)&&(opts.wsOptions[prop]=opts[prop])});return opts}function setDefaultBrowserOpts(opts){opts=setDefaultOpts(opts);opts.hostname||(opts.hostname=opts.host);if(!opts.hostname){if("undefined"===typeof document)throw Error("Could not determine host. Specify host manually.");const parsed=new URL(document.URL);opts.hostname=parsed.hostname;opts.port||(opts.port=parsed.port)}void 0===opts.objectMode&&(opts.objectMode=
!(!0===opts.binary||void 0===opts.binary));return opts}function createWebSocket(client,url,opts){debug("createWebSocket");debug("protocol: "+opts.protocolId+" "+opts.protocolVersion);client="MQIsdp"===opts.protocolId&&3===opts.protocolVersion?"mqttv3.1":"mqtt";debug("creating new Websocket for url: "+url+" and protocol: "+client);return new WS(url,[client],opts.wsOptions)}function createBrowserWebSocket(client,opts){var websocketSubProtocol="MQIsdp"===opts.protocolId&&3===opts.protocolVersion?"mqttv3.1":
"mqtt";client=buildUrl(opts,client);websocketSubProtocol=new WebSocket(client,[websocketSubProtocol]);websocketSubProtocol.binaryType="arraybuffer";return websocketSubProtocol}function streamBuilder(client,opts){debug("streamBuilder");opts=setDefaultOpts(opts);const url=buildUrl(opts,client);client=createWebSocket(client,url,opts);let webSocketStream=WS.createWebSocketStream(client,opts.wsOptions);webSocketStream.url=url;client.on("close",()=>{webSocketStream.destroy()});return webSocketStream}function browserStreamBuilder(client,
opts){function onopen(){stream.setReadable(proxy);stream.setWritable(proxy);stream.emit("connect")}function onclose(){stream.end();stream.destroy()}function onerror(err){stream.destroy(err)}function onmessage(event){event=event.data;event=event instanceof ArrayBuffer?Buffer.from(event):Buffer.from(event,"utf8");proxy.push(event)}function writev(chunks,cb){const buffers=Array(chunks.length);for(let i=0;i<chunks.length;i++)buffers[i]="string"===typeof chunks[i].chunk?Buffer.from(chunks[i],"utf8"):chunks[i].chunk;
this._write(Buffer.concat(buffers),"binary",cb)}function socketWriteBrowser(chunk,enc,next){socket.bufferedAmount>bufferSize&&setTimeout(socketWriteBrowser,bufferTimeout,chunk,enc,next);coerceToBuffer&&"string"===typeof chunk&&(chunk=Buffer.from(chunk,"utf8"));try{socket.send(chunk)}catch(err){return next(err)}next()}debug("browserStreamBuilder");let stream;const bufferSize=setDefaultBrowserOpts(opts).browserBufferSize||524288,bufferTimeout=opts.browserBufferTimeout||1E3,coerceToBuffer=!opts.objectMode;
let socket=createBrowserWebSocket(client,opts),proxy=function(options,socketWrite,socketEnd){options=new Transform({objectModeMode:options.objectMode});options._write=socketWrite;options._flush=socketEnd;return options}(opts,socketWriteBrowser,function(done){socket.close();done()});opts.objectMode||(proxy._writev=writev);proxy.on("close",()=>{socket.close()});client="undefined"!==typeof socket.addEventListener;socket.readyState===socket.OPEN?stream=proxy:(stream=stream=duplexify(void 0,void 0,opts),
opts.objectMode||(stream._writev=writev),client?socket.addEventListener("open",onopen):socket.onopen=onopen);stream.socket=socket;client?(socket.addEventListener("close",onclose),socket.addEventListener("error",onerror),socket.addEventListener("message",onmessage)):(socket.onclose=onclose,socket.onerror=onerror,socket.onmessage=onmessage);return stream}global=require("module$node_modules$process$browser");var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";const WS=require("module$node_modules$ws$browser"),
debug=require("module$node_modules$debug$src$browser")("mqttjs:ws"),duplexify=require("module$node_modules$duplexify$index"),Transform=require("module$node_modules$mqtt$node_modules$readable_stream$readable_browser").Transform;let WSS_OPTIONS="rejectUnauthorized ca cert key pfx passphrase".split(" ");const IS_BROWSER="undefined"!==typeof global&&"browser"===global.title||"function"===typeof __webpack_require__;module.exports=IS_BROWSER?browserStreamBuilder:streamBuilder}
//# sourceMappingURL=module$node_modules$mqtt$lib$connect$ws.js.map
