shadow$provide.module$node_modules$mqtt$lib$connect$ali=function(global,require,module,exports){function buildProxy(){var proxy=new Transform;proxy._write=function(chunk,encoding,next){my.sendSocketMessage({data:chunk.buffer,success:function(){next()},fail:function(){next(Error())}})};proxy._flush=function(done){my.closeSocket({success:function(){done()}})};return proxy}function bindEventHandler(){isInitialized||(isInitialized=!0,my.onSocketOpen(function(){stream.setReadable(proxy$jscomp$0);stream.setWritable(proxy$jscomp$0);
stream.emit("connect")}),my.onSocketMessage(function(res){if("string"===typeof res.data)res=Buffer.from(res.data,"base64"),proxy$jscomp$0.push(res);else{var reader=new FileReader;reader.addEventListener("load",function(){var data=reader.result;data=data instanceof ArrayBuffer?Buffer.from(data):Buffer.from(data,"utf8");proxy$jscomp$0.push(data)});reader.readAsArrayBuffer(res.data)}}),my.onSocketClose(function(){stream.end();stream.destroy()}),my.onSocketError(function(res){stream.destroy(res)}))}var Buffer=
require("module$node_modules$buffer$index").Buffer;"use strict";var Transform=require("module$node_modules$mqtt$node_modules$readable_stream$readable_browser").Transform,duplexify=require("module$node_modules$duplexify$index"),my,proxy$jscomp$0,stream,isInitialized=!1;module.exports=function(client,opts){opts.hostname=opts.hostname||opts.host;if(!opts.hostname)throw Error("Could not determine host. Specify host manually.");var websocketSubProtocol="MQIsdp"===opts.protocolId&&3===opts.protocolVersion?
"mqttv3.1":"mqtt";opts.hostname||(opts.hostname="localhost");opts.path||(opts.path="/");opts.wsOptions||(opts.wsOptions={});var protocol="alis"===opts.protocol?"wss":"ws",url=protocol+"://"+opts.hostname+opts.path;opts.port&&80!==opts.port&&443!==opts.port&&(url=protocol+"://"+opts.hostname+":"+opts.port+opts.path);"function"===typeof opts.transformWsUrl&&(url=opts.transformWsUrl(url,opts,client));my=opts.my;my.connectSocket({url,protocols:websocketSubProtocol});proxy$jscomp$0=buildProxy();stream=
duplexify.obj();bindEventHandler();return stream}}
//# sourceMappingURL=module$node_modules$mqtt$lib$connect$ali.js.map
